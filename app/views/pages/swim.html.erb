

<h3>Swimming Struggle</h3>

<canvas id="myCanvas"></canvas>

<script>

  // Canvas Renderer figures out what the stuff in the scene looks like and draws it
  var renderer = new THREE.WebGLRenderer({canvas: document.getElementById('myCanvas'), antialias: true});
  renderer.setClearColor(0x0000ff);
  renderer.setPixelRatio(window.devicePixelRatio);
    // Setting size to fill the whole browser window
  renderer.setSize( window.innerWidth, window.innerHeight );


  // Camera params:
    // 1. PerspectiveCamera objects get smaller when they get further away
      // field of view, aspect ratio for render output, near and far clipping plane
    // 2. OrthographicCamera - no perspective, consistent isometric view

  var camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 0.1, 3000 );
  // camera.position.set(0, 0, 0);
  // camera.position.x = 20;

  // Scene
    // contains all the 3d object data
  var scene = new THREE.Scene();

  // Lights
    // AmbientLight
    // PointLight - directional
    // DirectionalLight ie. sunlight - directional
    // SpotLight - directional
    // HemisphereLight - takes 2 colour values
  var light = new THREE.AmbientLight(0xffffff, 0.5);
  scene.add(light);
  var light1 = new THREE.PointLight(0xffffff, 0.5);
  scene.add(light1);
  // var pointLightHelper = new THREE.pointLightHelper(light1);
  // scene.add(pointLightHelper)

  // Shadows
  // renderer.shadowMap.enabled = true;
  // renderer.shadowMap.type = THREE.PCFShadowMap;
  //
  // var light = new THREE.SpotlightLight(0xFFFFFF, 4.0, 3000);
  // light.position.y = 100;
  // light.target = mesh;
  //
  // light.castShadow = true;
  // light.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(100, 1, 500, 1000));
  // light.shadow.bias = 0.0001;
  // light.shadow.mapSize.width = 2-48 * 2;
  // light.shadow.mapSize.height = 2-48 * 2;
  // scene.add(light);
  //
  // mesh.castShadow = true;
  // mesh.receiveShadow = true;

  var geometry = new THREE.PlaneGeometry(500, 500, 0.5, 0.8);
  var material = new THREE.MeshLambertMaterial({color: 0xF3FFE2});
  var mesh = new THREE.Mesh(geometry, material);
  mesh.position.set(0, 0, -1000);

  scene.add(mesh);

  // TESTING OCEAN JSON IMPORT - not working
  // var ocean;
  // var loader = new THREE.JSONLoader();
  //
  // // Loading the JSON file and providing call back functions (addOceanToScene)
  // loader.load("app/assets/javascripts/test.json", addOceanToScene);
  //
  // // After loading JSON from file, add to scene
  // function addOceanToScene( geometry, materials ) {
  //   var material = new THREE.MeshFaceMaterial(materials);
  //   ocean = new THREE.Mesh(geometry, materials);
  //   ocean.scale.set(1, 1, 1);
  //   scene.add(ocean);
  // };

  render();


  // RENDER LOOP
  requestAnimationFrame(render);

  var delta = 0;
  function render() {

    // delta += 0.1;
    //
    // camera.lookAt(light.position);
    // camera.position.x = Math.sin(delta) * 2000;
    // camera.position.z = Math.cos(delta) * 2000;

    // mesh.rotation.x += 0.01;
    // mesh.rotation.y += 0.01;
    renderer.render(scene, camera);
    requestAnimationFrame(render);
  }

</script>
